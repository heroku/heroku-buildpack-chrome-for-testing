#!/usr/bin/env bash
# Invoke with `source "$BUILDPACK_DIR/bin/install-chrome-dependencies"` from inside `bin/compile`.
# This script is mostly copied from:
#  https://github.com/heroku/heroku-buildpack-google-chrome/blob/master/bin/compile

# Uses variables & methods from compile script:
# BUILD_DIR
# CACHE_DIR
# ENV_DIR
# BUILDPACK_DIR
# topic()
# indent()

topic "Installing Chrome dependencies"

# Install correct dependencies according to $STACK
# The package list is validated by bin/test.sh - see its output to identify any missing libraries.
# Also look here for more packages/notes https://developers.google.com/web/tools/puppeteer/troubleshooting
case "${STACK}" in
  "heroku-20" | "heroku-22")
    PACKAGES="
      fonts-liberation
      libasound2
      libatk-bridge2.0-0
      libatk1.0-0
      libcups2
      libgbm1
      libxcomposite1
      libxdamage1
      libxfixes3
      libxkbcommon0
      libxrandr2
    "
    ;;
  "heroku-24")
    PACKAGES="
      fonts-liberation
      libasound2t64
      libatk-bridge2.0-0
      libatk1.0-0
      libcups2
      libgbm1
      libxcomposite1
      libxdamage1
      libxfixes3
      libxkbcommon0
      libxrandr2
    "
    ;;
  *)
    error "STACK must be 'heroku-20', 'heroku-22' or 'heroku-24', not '${STACK}'."
esac

# We must invalidate the cache if the stack changes, since the cached indexes and
# package archives will not be compatible with a different Ubuntu version.
# This file really should be inside "${CACHE_DIR}/apt" not "${CACHE_DIR}/.apt", however,
# the generic APT buildpack has used the wrong directory name for its version file for some
# time, so we have to match that, given this buildpack and the APT buildpack share all the
# other cached APT directories.
STACK_VERSION_FILE="${CACHE_DIR}/.apt/STACK"

if [[ -d "${CACHE_DIR}/apt" ]]; then
  if [[ -f "${STACK_VERSION_FILE}" ]]; then
    CACHED_STACK=$(cat "${STACK_VERSION_FILE}")
  else
    CACHED_STACK=
  fi

  if [[ "${CACHED_STACK}" == "${STACK}" ]]; then
    echo "Reusing APT cache" | indent
  elif [[ -z "${CACHED_STACK}" ]]; then
    # Older versions of the buildpack won't have written the version file.
    # (Plus any other broken APT-related buildpacks that don't invalidate on cache change.)
    echo "Clearing APT cache since it's missing the stack version metadata file." | indent
    rm -rf "${CACHE_DIR}/apt"
  else
    echo "Clearing APT cache since stack changed from ${CACHED_STACK} to ${STACK}" | indent
    rm -rf "${CACHE_DIR}/apt"
  fi
fi

mkdir -p "${CACHE_DIR}/.apt"
echo "${STACK}" > "${STACK_VERSION_FILE}"

APT_CACHE_DIR="$CACHE_DIR/apt/cache"
APT_STATE_DIR="$CACHE_DIR/apt/state"

mkdir -p "$APT_CACHE_DIR/archives/partial"
mkdir -p "$APT_STATE_DIR/lists/partial"

APT_OPTIONS="-o debug::nolocking=true -o dir::cache=$APT_CACHE_DIR -o dir::state=$APT_STATE_DIR"

echo "Updating APT package index" | indent
apt-get $APT_OPTIONS update | indent

for PACKAGE in $PACKAGES; do
  if [[ $PACKAGE == *deb ]]; then
    PACKAGE_NAME=$(basename $PACKAGE .deb)
    PACKAGE_FILE=$APT_CACHE_DIR/archives/$PACKAGE_NAME.deb

    echo "Fetching $PACKAGE" | indent
    curl -s -L -z $PACKAGE_FILE -o $PACKAGE_FILE $PACKAGE 2>&1 | indent
  else
    echo "Fetching .debs for $PACKAGE" | indent
    apt-get $APT_OPTIONS -y --force-yes -d install --reinstall --no-install-recommends $PACKAGE | indent
  fi
done

mkdir -p $BUILD_DIR/.apt

for DEB in $(ls -1 $APT_CACHE_DIR/archives/*.deb); do
  echo "Installing $(basename $DEB)" | indent
  dpkg -x $DEB $BUILD_DIR/.apt/
done

echo "Writing profile script" | indent
mkdir -p $BUILD_DIR/.profile.d
cat <<EOF >$BUILD_DIR/.profile.d/000_apt.sh
export PATH="\$HOME/.apt/usr/bin:\$PATH"
export LD_LIBRARY_PATH="\$HOME/.apt/usr/lib/x86_64-linux-gnu:\$HOME/.apt/usr/lib/i386-linux-gnu:\$HOME/.apt/usr/lib:\$LD_LIBRARY_PATH"
export LIBRARY_PATH="\$HOME/.apt/usr/lib/x86_64-linux-gnu:\$HOME/.apt/usr/lib/i386-linux-gnu:\$HOME/.apt/usr/lib:\$LIBRARY_PATH"
export INCLUDE_PATH="\$HOME/.apt/usr/include:\$HOME/.apt/usr/include/x86_64-linux-gnu:\$INCLUDE_PATH"
export CPATH="\$INCLUDE_PATH"
export CPPPATH="\$INCLUDE_PATH"
export PKG_CONFIG_PATH="\$HOME/.apt/usr/lib/x86_64-linux-gnu/pkgconfig:\$HOME/.apt/usr/lib/i386-linux-gnu/pkgconfig:\$HOME/.apt/usr/lib/pkgconfig:\$PKG_CONFIG_PATH"
EOF

export PATH="$BUILD_DIR/.apt/usr/bin:$PATH"
export LD_LIBRARY_PATH="$BUILD_DIR/.apt/usr/lib/x86_64-linux-gnu:$BUILD_DIR/.apt/usr/lib/i386-linux-gnu:$BUILD_DIR/.apt/usr/lib:$LD_LIBRARY_PATH"
export LIBRARY_PATH="$BUILD_DIR/.apt/usr/lib/x86_64-linux-gnu:$BUILD_DIR/.apt/usr/lib/i386-linux-gnu:$BUILD_DIR/.apt/usr/lib:$LIBRARY_PATH"
export INCLUDE_PATH="$BUILD_DIR/.apt/usr/include:$BUILD_DIR/.apt/usr/include/x86_64-linux-gnu:$INCLUDE_PATH"
export CPATH="$INCLUDE_PATH"
export CPPPATH="$INCLUDE_PATH"
export PKG_CONFIG_PATH="$BUILD_DIR/.apt/usr/lib/x86_64-linux-gnu/pkgconfig:$BUILD_DIR/.apt/usr/lib/i386-linux-gnu/pkgconfig:$BUILD_DIR/.apt/usr/lib/pkgconfig:$PKG_CONFIG_PATH"

#give environment to later buildpacks
export | grep -E -e ' (PATH|LD_LIBRARY_PATH|LIBRARY_PATH|INCLUDE_PATH|CPATH|CPPPATH|PKG_CONFIG_PATH)='  > "$BUILDPACK_DIR/export"

echo "Installed Chrome dependencies for $STACK" | indent
